% Authors: Riccardo Renzulli, Gabriele Sartor, Giovanni Bonetta
% UniversitÃ  degli Studi di Torino
% Department of Computer Science
% Date: May 2017
% riccardo.renzulli@edu.unito.it
% gabriele.sartor@edu.unito.it
% giovanni.bonetta@edu.unito.it

% initial([1,2,4,empty,5,3,7,8,6]).
% initial([1,2,3,4,5,6,7,empty,8]).
% initial([7,empty,1,2,5,4,3,8,6]).
%initial([8,7,6,5,empty,4,3,2,1]).

%FAIL
initial([1,2,3,4,5,6,empty,8,7]).

final([1,2,3,4,5,6,7,8,empty]).

% Test if an action is applicable in a certain state.
applicable(est,State):-
	nth(IndexEmpty,State,empty),
	\+borderLeft(IndexEmpty).

applicable(ovest,State):-
	nth(IndexEmpty,State,empty),
	\+borderRight(IndexEmpty).

applicable(nord,State):-
	nth(IndexEmpty,State,empty),
	\+borderBottom(IndexEmpty).

applicable(sud,State):-
	nth(IndexEmpty,State,empty),
	\+borderTop(IndexEmpty).

% Given a list List and an index Index returns the element at the position Index.
% Given a list List and an element Element returns the index of the element Element.
nth(0,[X|_],X):-!.
nth(Index,[_|Tail],X):-
	nonvar(Index),!,
	TailIndex is Index-1,
	nth(TailIndex,Tail,X).
nth(Index,[_|Tail],X):-
	nonvar(X),
	nth(TailIndex,Tail,X),
	Index is TailIndex+1.

% Given an index Index returns true if the element at the position Index is at the border.
borderLeft(Index):- Index mod 3=:=0.
borderRight(Index):- Index mod 3=:=2.
borderBottom(Index):- Index > 5.
borderTop(Index):- Index < 3.

% Given an action Action and a state State, returns the new state NewState generated by applying the action Action to the state State.
transform(est,State,NewState):-
	nth(IndexEmpty,State,empty),
	IndexTile is IndexEmpty-1,
	swap(State,IndexEmpty,IndexTile,NewState).

transform(ovest,State,NewState):-
	nth(IndexEmpty,State,empty),
	IndexTile is IndexEmpty+1,
	swap(State,IndexEmpty,IndexTile,NewState).

transform(nord,State,NewState):-
	nth(IndexEmpty,State,empty),
	IndexTile is IndexEmpty+3,
	swap(State,IndexEmpty,IndexTile,NewState).

transform(sud,State,NewState):-
	nth(IndexEmpty,State,empty),
	IndexTile is IndexEmpty-3,
	swap(State,IndexEmpty,IndexTile,NewState).

% Given a list List and two index I,J returns a new list NewList with elements at positions I and J swapped.
swap(List,I,J,NewList):-
	nth(I,List,ElemI),
	nth(J,List,ElemJ),
	setElementAt(List,ElemI,J,Temp),
	setElementAt(Temp,ElemJ,I,NewList).

% Set the element Elem at the position Index
setElementAt([_|Tail],Elem,0,[Elem|Tail]):-!.
setElementAt([X|Tail],Elem,N,[X|NewTail]):-
	N1 is N-1,
	setElementAt(Tail,Elem,N1,NewTail).

% Given a state State, returns the heuristic function h(n) using Manhattan distance
evaluate([],_,0) :- !.
evaluate([empty|Tail],Index,H) :-
	!,NewIndex is Index + 1,
	evaluate(Tail,NewIndex,H).
evaluate([Head|Tail],Index,H):-
	FinalIndex is Head - 1,                %FinalIndex is the right position of Head.
	calculate(FinalIndex,Index,HnElem),    %Index is the current position of Head.
	NewIndex is Index + 1,
	evaluate(Tail,NewIndex,HTail),
	H is HTail + HnElem.

calculate(Pos,Index,Hn) :-
	XPos is Pos mod 3,
	YPos is Pos div 3,
	XIndex is Index mod 3,
	YIndex is Index div 3,
	DeltaX is XPos - XIndex,
	DeltaY is YPos - YIndex,
	AbsDeltaX is abs(DeltaX),
	AbsDeltaY is abs(DeltaY),
	Hn is AbsDeltaX + AbsDeltaY.
